node {
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        app = docker.build("iyadomry/app2")
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        app.inside {
            sh 'echo "Tests passed"'
        }
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://registry.hub.docker.com', 'DockerHub') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }
}

node {
  def remote = [:]
  remote.name = 'k8s-master'
  remote.host = '192.168.0.26'
  remote.user = 'root'
  remote.password = 'password'
  remote.allowAnyHosts = true
  stage('Remote SSH') {
    sshCommand remote: remote, command: "git clone https://github.com/Iyadomry/app2.git /root/app2"
    sshCommand remote: remote, command: "kubectl apply -f /root/app2/app2.yaml --namespace iyad"
    sshCommand remote: remote, command: "kubectl rollout restart deployment app2 --namespace iyad"
    sshCommand remote: remote, command: "rm -rf /root/app2/"
  }
}
